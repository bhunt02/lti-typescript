{"version":3,"file":"database.js","sourceRoot":"/","sources":["utils/database.ts"],"names":[],"mappings":";;;AAAA,qCAWiB;AACjB,iCAAiC;AACjC,iEAA0D;AAC1D,yEAAiE;AACjE,2EAAmE;AACnE,iEAAyD;AACzD,uDAAuE;AACvE,2DAAoD;AACpD,2DAAoD;AACpD,mCAAwC;AAGxC,MAAa,QAAQ;IACnB;QACE,OAAO,QAAQ,CAAC,QAAQ,CAAC;IAC3B,CAAC;IAQD,MAAM,KAAK,UAAU;QACnB,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa;YACjC,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;QACjD,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAKD,IAAI,UAAU;QACZ,OAAO,QAAQ,CAAC,UAAU,CAAC;IAC7B,CAAC;IAED,IAAY,aAAa;QACvB,OAAO,QAAQ,CAAC,aAAa,CAAC;IAChC,CAAC;IAQD,MAAM,CAAC,KAAK,CAAC,kBAAkB,CAC7B,OAA0B,EAC1B,aAAqB,EACrB,WAAW,GAAG,KAAK;QAEnB,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClB,OAAO,IAAI,CAAC,QAAQ,CAAC;QACvB,CAAC;QAED,MAAM,QAAQ,GAAG;YACf,sCAAgB;YAChB,wCAAiB;YACjB,8BAAY;YACZ,2BAAc;YACd,4BAAe;YACf,yBAAU;YACV,+BAAa;YACb,yBAAU;SACX,CAAC;QAEF,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;QAC/B,IAAI,CAAC,WAAW,GAAG,IAAI,oBAAU,CAAC;YAChC,QAAQ;YACR,GAAG,OAAO;SACX,CAAC,CAAC;QACH,MAAM,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC;QACpC,MAAM,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;IAClD,CAAC;IAKD,MAAM,CAAC,KAAK,CAAC,KAAK;QAChB,IAAI,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC;YACnC,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;QACnC,CAAC;IACH,CAAC;IAKD,KAAK,CAAC,KAAK;QACT,MAAM,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;IAClC,CAAC;IAEO,KAAK,CAAC,aAAa,CAEzB,MAAS;QACT,OAAO;YACL,GAAG,MAAM;YACT,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;SAC7D,CAAC;IACJ,CAAC;IAOD,MAAM,CAAC,KAAK,CAAC,IAAI,CACf,IAAqB,EACrB,OAA4B;QAE5B,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACjD,CAAC;IAOD,KAAK,CAAC,IAAI,CACR,IAAqB,EACrB,OAA4B;QAE5B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAEvE,OAAO,MAAM,OAAO,CAAC,GAAG,CACtB,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;YAC1B,IAAI,MAAM,YAAY,uBAAe,EAAE,CAAC;gBACtC,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAC1C,CAAC;iBAAM,CAAC;gBACN,OAAO,MAAM,CAAC;YAChB,CAAC;QACH,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAOD,MAAM,CAAC,KAAK,CAAC,OAAO,CAClB,IAAqB,EACrB,OAA0B;QAE1B,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACpD,CAAC;IAOD,KAAK,CAAC,OAAO,CACX,IAAqB,EACrB,OAA0B;QAE1B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC1E,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,OAAO,SAAS,CAAC;QACnB,CAAC;QAED,IAAI,MAAM,YAAY,uBAAe,EAAE,CAAC;YACtC,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAC1C,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAOD,MAAM,CAAC,KAAK,CAAC,IAAI,CACf,IAAqB,EACrB,MAAsB;QAEtB,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAChD,CAAC;IAOD,KAAK,CAAC,IAAI,CACR,IAAqB,EACrB,MAAsB;QAEtB,IAAI,MAAM,IAAI,MAAM,EAAE,CAAC;YACrB,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;YAClE,MAAM,GAAG;gBACP,GAAG,MAAM;gBACT,EAAE,EAAE,SAAS,CAAC,EAAE;gBAChB,IAAI,EAAE,SAAS,CAAC,IAAI;aACrB,CAAC;QACJ,CAAC;QAED,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAChE,CAAC;IAQD,MAAM,CAAC,KAAK,CAAC,MAAM,CACjB,IAAqB,EACrB,MAAiC,EACjC,KAA0B;QAE1B,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;IACzD,CAAC;IAQD,KAAK,CAAC,MAAM,CACV,IAAqB,EACrB,MAAiC,EACjC,KAA0B;QAE1B,IAAI,MAAM,IAAI,MAAM,EAAE,CAAC;YACrB,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;YAClE,MAAM,GAAG;gBACP,GAAG,MAAM;gBACT,EAAE,EAAE,SAAS,CAAC,EAAE;gBAChB,IAAI,EAAE,SAAS,CAAC,IAAI;aACrB,CAAC;QACJ,CAAC;QAED,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACzE,CAAC;IAOD,MAAM,CAAC,KAAK,CAAC,MAAM,CACjB,IAAqB,EACrB,OAA4B;QAE5B,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACnD,CAAC;IAOD,KAAK,CAAC,MAAM,CACV,IAAqB,EACrB,OAA4B;QAE5B,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACnE,CAAC;IAMD,KAAK,CAAC,OAAO,CAAC,IAAY;QACxB,MAAM,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QACzC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAChC,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QACvC,MAAM,EAAE,GAAG,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;QAClC,MAAM,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC,aAAa,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;QAC7D,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACpC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACvD,OAAO,EAAE,EAAE,EAAE,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;IACrE,CAAC;IAOD,KAAK,CAAC,OAAO,CAAC,IAAY,EAAE,EAAU;QACpC,MAAM,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QACzC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAChC,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QACvC,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;QACrC,MAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAC/C,MAAM,QAAQ,GAAG,MAAM,CAAC,gBAAgB,CACtC,aAAa,EACb,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAChB,KAAK,CACN,CAAC;QACF,IAAI,SAAS,GAAG,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QAC/C,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACzD,OAAO,SAAS,CAAC,QAAQ,EAAE,CAAC;IAC9B,CAAC;CACF;AA7RD,4BA6RC","sourcesContent":["import {\n  BaseEntity,\n  DataSource,\n  DataSourceOptions,\n  DeepPartial,\n  DeleteResult,\n  EntityTarget,\n  FindManyOptions,\n  FindOneOptions,\n  FindOptionsWhere,\n  UpdateResult,\n} from 'typeorm';\nimport * as crypto from 'crypto';\nimport {PlatformModel} from '../entities/platform.entity';\nimport {AccessTokenModel} from '../entities/access_token.entity';\nimport {ContextTokenModel} from '../entities/context_token.entity';\nimport {IdTokenModel} from '../entities/id_token.entity';\nimport {PrivateKeyModel, PublicKeyModel} from '../entities/key.entity';\nimport {NonceModel} from '../entities/nonce.entity';\nimport {StateModel} from '../entities/state.entity';\nimport {EncryptedEntity} from './types';\nimport {QueryDeepPartialEntity} from 'typeorm/query-builder/QueryPartialEntity';\n\nexport class Database {\n  protected constructor() {\n    return Database.instance;\n  }\n\n  private static instance: Database;\n\n  private static encryptionKey: string;\n\n  static _dataSource: DataSource;\n\n  static get dataSource(): DataSource {\n    if (!this._dataSource.isInitialized)\n      throw new Error('DataSource is uninitialized');\n    return this._dataSource;\n  }\n\n  /**\n   * @desc Returns the active DataSource object which represents the connection to the database\n   */\n  get dataSource(): DataSource {\n    return Database.dataSource;\n  }\n\n  private get encryptionKey(): string {\n    return Database.encryptionKey;\n  }\n\n  /**\n   * @desc Initializes connection to the database with TypeORM.\n   * @param options Database connection options. Overwrite 'Entities' to use customized entities that are supported by the database of your choosing. Default entities support PostgreSQL database.\n   * @param encryptionKey The encryption key used for encrypting/decrypting certain data\n   * @param synchronize Whether to drop tables and recreate schema on startup (default: false)\n   */\n  static async initializeDatabase(\n    options: DataSourceOptions,\n    encryptionKey: string,\n    synchronize = false,\n  ) {\n    if (this.instance) {\n      return this.instance;\n    }\n\n    const entities = [\n      AccessTokenModel,\n      ContextTokenModel,\n      IdTokenModel,\n      PublicKeyModel,\n      PrivateKeyModel,\n      NonceModel,\n      PlatformModel,\n      StateModel,\n    ];\n\n    this.encryptionKey = encryptionKey;\n    this.instance = new Database();\n    this._dataSource = new DataSource({\n      entities, // Allows overwrite of entities\n      ...options,\n    });\n    await this._dataSource.initialize();\n    await this._dataSource.synchronize(synchronize);\n  }\n\n  /**\n   * @description Closes connection with the database.\n   */\n  static async close() {\n    if (this._dataSource.isInitialized) {\n      await this._dataSource.destroy();\n    }\n  }\n\n  /**\n   * @description Closes connection with the database.\n   */\n  async close() {\n    await this.dataSource.destroy();\n  }\n\n  private async decryptRecord<\n    T extends BaseEntity & { data: string; iv: string },\n  >(record: T): Promise<T> {\n    return {\n      ...record,\n      data: JSON.parse(await this.decrypt(record.data, record.iv)),\n    };\n  }\n\n  /**\n   * @desc Finds entities of the defined type that match given find options.\n   * @param type The Entity class type\n   * @param options Find options\n   */\n  static async find<T extends BaseEntity>(\n    type: EntityTarget<T>,\n    options?: FindManyOptions<T>,\n  ): Promise<T[]> {\n    return await this.instance.find(type, options);\n  }\n\n  /**\n   * @desc Finds entities of the defined type that match given find options.\n   * @param type The Entity class type\n   * @param options Find options\n   */\n  async find<T extends BaseEntity>(\n    type: EntityTarget<T>,\n    options?: FindManyOptions<T>,\n  ): Promise<T[]> {\n    const result = await this.dataSource.getRepository(type).find(options);\n\n    return await Promise.all(\n      result.map(async (record) => {\n        if (record instanceof EncryptedEntity) {\n          return await this.decryptRecord(record);\n        } else {\n          return record;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @desc Finds first entity of the defined type by a given find options. If entity was not found in the database - returns null.\n   * @param type The Entity class type\n   * @param options Find options\n   */\n  static async findOne<T extends BaseEntity>(\n    type: EntityTarget<T>,\n    options: FindOneOptions<T>,\n  ): Promise<T | undefined> {\n    return await this.instance.findOne(type, options);\n  }\n\n  /**\n   * @desc Finds first entity of the defined type by a given find options. If entity was not found in the database - returns null.\n   * @param type The Entity class type\n   * @param options Find options\n   */\n  async findOne<T extends BaseEntity>(\n    type: EntityTarget<T>,\n    options: FindOneOptions<T>,\n  ): Promise<T | undefined> {\n    const result = await this.dataSource.getRepository(type).findOne(options);\n    if (!result) {\n      return undefined;\n    }\n\n    if (result instanceof EncryptedEntity) {\n      return await this.decryptRecord(result);\n    }\n\n    return result;\n  }\n\n  /**\n   * @desc Saves a given entity of the provided type in the database. If entity does not exist in the database then inserts, otherwise updates.\n   * @param type The Entity class type\n   * @param params The parameters of the entity to save\n   */\n  static async save<T extends BaseEntity>(\n    type: EntityTarget<T>,\n    params: DeepPartial<T>,\n  ): Promise<T> {\n    return await this.instance.save(type, params);\n  }\n\n  /**\n   * @desc Saves a given entity of the provided type in the database. If entity does not exist in the database then inserts, otherwise updates.\n   * @param type The Entity class type\n   * @param params The parameters of the entity to save\n   */\n  async save<T extends BaseEntity>(\n    type: EntityTarget<T>,\n    params: DeepPartial<T>,\n  ): Promise<T> {\n    if ('data' in params) {\n      const encrypted = await this.encrypt(JSON.stringify(params.data));\n      params = {\n        ...params,\n        iv: encrypted.iv,\n        data: encrypted.data,\n      };\n    }\n\n    return await this.dataSource.getRepository(type).save(params);\n  }\n\n  /**\n   * @desc Updates entity of given type partially. Entity can be found by a given conditions. Unlike save method executes a primitive operation without cascades, relations and other operations included. Executes fast and efficient UPDATE query. Does not check if entity exist in the database.\n   * @param type The Entity class type\n   * @param params The parameters of the entity to update\n   * @param where Options to filter which entities are updated\n   */\n  static async update<T extends BaseEntity>(\n    type: EntityTarget<T>,\n    params: QueryDeepPartialEntity<T>,\n    where: FindOptionsWhere<T>,\n  ): Promise<UpdateResult> {\n    return await this.instance.update(type, params, where);\n  }\n\n  /**\n   * @desc Updates entity of given type partially. Entity can be found by a given conditions. Unlike save method executes a primitive operation without cascades, relations and other operations included. Executes fast and efficient UPDATE query. Does not check if entity exist in the database.\n   * @param type The Entity class type\n   * @param params The parameters of the entity to update\n   * @param where Options to filter which entities are updated\n   */\n  async update<T extends BaseEntity>(\n    type: EntityTarget<T>,\n    params: QueryDeepPartialEntity<T>,\n    where: FindOptionsWhere<T>,\n  ): Promise<UpdateResult> {\n    if ('data' in params) {\n      const encrypted = await this.encrypt(JSON.stringify(params.data));\n      params = {\n        ...params,\n        iv: encrypted.iv,\n        data: encrypted.data,\n      };\n    }\n\n    return await this.dataSource.getRepository(type).update(where, params);\n  }\n\n  /**\n   * @desc Deletes entities of the provided type by a given criteria. Unlike save method executes a primitive operation without cascades, relations and other operations included. Executes fast and efficient DELETE query. Does not check if entity exist in the database.\n   * @param type The Entity class type\n   * @param options Filter options for determining which entities to delete\n   */\n  static async delete<T extends BaseEntity>(\n    type: EntityTarget<T>,\n    options: FindOptionsWhere<T>,\n  ): Promise<DeleteResult> {\n    return await this.instance.delete(type, options);\n  }\n\n  /**\n   * @desc Deletes entities of the provided type by a given criteria. Unlike save method executes a primitive operation without cascades, relations and other operations included. Executes fast and efficient DELETE query. Does not check if entity exist in the database.\n   * @param type The Entity class type\n   * @param options Filter options for determining which entities to delete\n   */\n  async delete<T extends BaseEntity>(\n    type: EntityTarget<T>,\n    options: FindOptionsWhere<T>,\n  ): Promise<DeleteResult> {\n    return await this.dataSource.getRepository(type).delete(options);\n  }\n\n  /**\n   * @description Encrypts data.\n   * @param {String} data - Data to be encrypted\n   */\n  async encrypt(data: string) {\n    const hash = crypto.createHash('sha256');\n    hash.update(this.encryptionKey);\n    const key = hash.digest().slice(0, 32);\n    const iv = crypto.randomBytes(16);\n    const cipher = crypto.createCipheriv('aes-256-cbc', key, iv);\n    let encrypted = cipher.update(data);\n    encrypted = Buffer.concat([encrypted, cipher.final()]);\n    return { iv: iv.toString('hex'), data: encrypted.toString('hex') };\n  }\n\n  /**\n   * @description Decrypts data.\n   * @param {String} data - Data to be decrypted\n   * @param {String} iv - Encryption iv\n   */\n  async decrypt(data: string, iv: string) {\n    const hash = crypto.createHash('sha256');\n    hash.update(this.encryptionKey);\n    const key = hash.digest().slice(0, 32);\n    const newIv = Buffer.from(iv, 'hex');\n    const encryptedText = Buffer.from(data, 'hex');\n    const decipher = crypto.createDecipheriv(\n      'aes-256-cbc',\n      Buffer.from(key),\n      newIv,\n    );\n    let decrypted = decipher.update(encryptedText);\n    decrypted = Buffer.concat([decrypted, decipher.final()]);\n    return decrypted.toString();\n  }\n}\n"]}