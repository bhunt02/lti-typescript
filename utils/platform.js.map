{"version":3,"file":"platform.js","sourceRoot":"/","sources":["utils/platform.ts"],"names":[],"mappings":";;;AACA,iEAA0D;AAC1D,yCAAoC;AACpC,uDAAuE;AACvE,yEAAiE;AACjE,iCAA4B;AAC5B,mCAA8B;AAK9B,MAAa,QAAQ;IACnB,YAAoB,aAA4B;QAA5B,kBAAa,GAAb,aAAa,CAAe;QAoPhD,QAAG,GAAgB,IAAI,WAAW,EAAE,CAAC;IApPc,CAAC;IAEpD,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC;IACxC,CAAC;IACD,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;IACrC,CAAC;IACD,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;IACjC,CAAC;IACD,IAAI,sBAAsB;QACxB,OAAO,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC;IACnD,CAAC;IACD,IAAI,mBAAmB;QACrB,OAAO,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC;IAChD,CAAC;IACD,IAAI,mBAAmB;QACrB,OAAO,CACL,IAAI,CAAC,aAAa,CAAC,mBAAmB;YACtC,IAAI,CAAC,aAAa,CAAC,mBAAmB,CACvC,CAAC;IACJ,CAAC;IACD,IAAI,GAAG;QACL,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC;IAChC,CAAC;IACD,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC;IACxC,CAAC;IACD,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC;IACnC,CAAC;IACD,IAAI,qBAAqB;QACvB,OAAO,IAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC;IAClD,CAAC;IACD,IAAI,iBAAiB;QACnB,OAAO,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC;IAC9C,CAAC;IACD,IAAI,oBAAoB;QACtB,OAAO,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC;IACjD,CAAC;IACD,IAAI,eAAe;QACjB,OAAO,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC;IAC5C,CAAC;IAMD,KAAK,CAAC,OAAO,CAAC,IAAY;QACxB,MAAM,mBAAQ,CAAC,MAAM,CACnB,+BAAa,EACb;YACE,IAAI;SACL,EACD;YACE,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ;SACxB,CACF,CAAC;QACF,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC;IACpC,CAAC;IAKD,KAAK,CAAC,SAAS,CAAC,MAAe;QAC7B,MAAM,mBAAQ,CAAC,MAAM,CACnB,+BAAa,EACb;YACE,MAAM;SACP,EACD;YACE,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ;SACxB,CACF,CAAC;QACF,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC;IACpC,CAAC;IAMD,KAAK,CAAC,iBAAiB;QACrB,MAAM,GAAG,GAAG,MAAM,mBAAQ,CAAC,OAAO,CAAC,2BAAc,EAAE;YACjD,KAAK,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE;SACzB,CAAC,CAAC;QACH,OAAO,GAAG,CAAC,IAA4B,CAAC;IAC1C,CAAC;IAMD,KAAK,CAAC,kBAAkB;QACtB,MAAM,GAAG,GAAG,MAAM,mBAAQ,CAAC,OAAO,CAAC,4BAAe,EAAE;YAClD,KAAK,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE;SACzB,CAAC,CAAC;QACH,OAAO,GAAG,CAAC,IAA4B,CAAC;IAC1C,CAAC;IAOD,KAAK,CAAC,aAAa,CAAC,MAA4B,EAAE,GAAY;QAC5D,MAAM,mBAAQ,CAAC,MAAM,CACnB,+BAAa,EACb;YACE,eAAe,EAAE,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM;YAChD,YAAY,EAAE,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG;SACxC,EACD;YACE,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ;SACxB,CACF,CAAC;QACF,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC;IACpC,CAAC;IAMD,KAAK,CAAC,yBAAyB,CAAC,sBAA8B;QAC5D,MAAM,mBAAQ,CAAC,MAAM,CACnB,+BAAa,EACb;YACE,sBAAsB;SACvB,EACD;YACE,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ;SACxB,CACF,CAAC;QACF,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC;IACpC,CAAC;IAMD,KAAK,CAAC,sBAAsB,CAAC,mBAA2B;QACtD,MAAM,mBAAQ,CAAC,MAAM,CACnB,+BAAa,EACb;YACE,mBAAmB;SACpB,EACD;YACE,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ;SACxB,CACF,CAAC;QACF,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC;IACpC,CAAC;IAMD,KAAK,CAAC,sBAAsB,CAAC,mBAAkC;QAC7D,MAAM,mBAAQ,CAAC,MAAM,CACnB,+BAAa,EACb;YACE,mBAAmB;SACpB,EACD;YACE,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ;SACxB,CACF,CAAC;QACF,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC;IACpC,CAAC;IAMD,KAAK,CAAC,cAAc,CAAC,MAAc;QACjC,IAAI,IAAI,CAAC,eAAe,EAAE,CAAC;YACzB,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;gBAClC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC;oBAChD,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBACvC,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QACD,MAAM,aAAa,GAAG,MAAM,mBAAQ,CAAC,OAAO,CAAC,sCAAgB,EAAE;YAC7D,KAAK,EAAE,EAAE,WAAW,EAAE,IAAI,CAAC,WAAW,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE;SAC1E,CAAC,CAAC;QACH,IAAI,KAAsB,CAAC;QAC3B,MAAM,OAAO,GACX,aAAa;YACb,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,aAAa,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,GAAG,IAAI;gBACrD,aAAa,CAAC,SAAS,CAAC;QAC5B,IAAI,CAAC,aAAa,IAAI,OAAO,EAAE,CAAC;YAC9B,aAAK,CAAC,GAAG,CACP,IAAI,EACJ,yBAAyB,GAAG,IAAI,CAAC,WAAW,GAAG,YAAY,CAC5D,CAAC;YACF,aAAK,CAAC,GAAG,CACP,IAAI,EACJ,8CAA8C,GAAG,IAAI,CAAC,WAAW,CAClE,CAAC;YACF,aAAK,CAAC,GAAG,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM,CAAC,CAAC;YAC1C,KAAK,GAAG,MAAM,WAAI,CAAC,cAAc,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAClD,CAAC;aAAM,CAAC;YACN,aAAK,CAAC,GAAG,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;YACtC,KAAK,GAAG,aAAa,CAAC,IAAkC,CAAC;QAC3D,CAAC;QACD,KAAK,CAAC,UAAU;YACd,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACvE,OAAO,KAAK,CAAC;IACf,CAAC;IAKD,KAAK,CAAC,cAAc;QAClB,OAAO;YACL,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,sBAAsB,EAAE,IAAI,CAAC,sBAAsB;YACnD,mBAAmB,EAAE,IAAI,CAAC,mBAAmB;YAC7C,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,SAAS,EAAE,MAAM,IAAI,CAAC,iBAAiB,EAAE;YACzC,MAAM,EAAE,IAAI,CAAC,MAAM;SACpB,CAAC;IACJ,CAAC;IAKD,KAAK,CAAC,MAAM;QACV,MAAM,mBAAQ,CAAC,MAAM,CAAC,2BAAc,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;QACzD,MAAM,mBAAQ,CAAC,MAAM,CAAC,4BAAe,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;QAC1D,MAAM,mBAAQ,CAAC,MAAM,CAAC,+BAAa,EAAE;YACnC,GAAG,EAAE,IAAI,CAAC,GAAG;SACd,CAAC,CAAC;IACL,CAAC;CAGF;AAtPD,4BAsPC;AAED,MAAM,WAAW;IAQf,KAAK,CAAC,OAAO,CACX,GAAW,EACX,MAAmD,EACnD,OAAqC,EACrC,YAAY,GAAG,KAAK;QAEpB,OAAO,MAAM,KAAK,CAAC,GAAG,EAAE;YACtB,GAAG,OAAO;YACV,MAAM;SACP,CAAC;aACC,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;YAClB,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC;gBACZ,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,CAAC;gBACrD,MAAM,EAAE,MAAM,EAAE,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,CAAC,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,iBAAiB,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,EAAE,KAAK,KAAK,IAAI,EAAE,iBAAiB,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;YAClJ,CAAC;YACD,IAAI,GAAG,CAAC,MAAM,IAAI,GAAG,EAAE,CAAC;gBACtB,IAAI,YAAY,EAAE,CAAC;oBACjB,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;gBAC1B,CAAC;gBACD,OAAO;YACT,CAAC;YACD,IAAI,YAAY,EAAE,CAAC;gBACjB,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,CAAC;YACjC,CAAC;YACD,OAAO,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;QAC1B,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;YACb,IAAI,QAAQ,IAAI,GAAG,EAAE,CAAC;gBACpB,MAAM,IAAI,KAAK,CAAC,GAAG,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;YACnD,CAAC;YACD,MAAM,IAAI,KAAK,CAAC,QAAQ,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;IACP,CAAC;IAQD,KAAK,CAAC,GAAG,CACP,GAAW,EACX,OAAqC,EACrC,YAAY,GAAG,KAAK;QAEpB,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;IAC/D,CAAC;IAQD,KAAK,CAAC,IAAI,CACR,GAAW,EACX,OAAqC,EACrC,YAAY,GAAG,KAAK;QAEpB,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,MAAM,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;IAChE,CAAC;IAQD,KAAK,CAAC,GAAG,CACP,GAAW,EACX,OAAqC,EACrC,YAAY,GAAG,KAAK;QAEpB,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;IAC/D,CAAC;IAQD,KAAK,CAAC,KAAK,CACT,GAAW,EACX,OAAqC,EACrC,YAAY,GAAG,KAAK;QAEpB,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;IACjE,CAAC;IAQD,KAAK,CAAC,MAAM,CACV,GAAW,EACX,OAAqC,EACrC,YAAY,GAAG,KAAK;QAEpB,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,QAAQ,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;IAClE,CAAC;CACF","sourcesContent":["import {AccessTokenType, AuthConfigType, AuthTokenMethodEnum, KeyObject, PlatformProperties} from './types';\nimport {PlatformModel} from '../entities/platform.entity';\nimport {Database} from './database';\nimport {PrivateKeyModel, PublicKeyModel} from '../entities/key.entity';\nimport {AccessTokenModel} from '../entities/access_token.entity';\nimport {Auth} from './auth';\nimport {Debug} from './debug';\n\n/**\n * @description Class representing a registered platform.\n */\nexport class Platform {\n  constructor(private platformModel: PlatformModel) {}\n\n  get platformUrl(): string {\n    return this.platformModel.platformUrl;\n  }\n  get clientId(): string {\n    return this.platformModel.clientId;\n  }\n  get name(): string {\n    return this.platformModel.name;\n  }\n  get authenticationEndpoint(): string {\n    return this.platformModel.authenticationEndpoint;\n  }\n  get accessTokenEndpoint(): string {\n    return this.platformModel.accessTokenEndpoint;\n  }\n  get authorizationServer(): string {\n    return (\n      this.platformModel.authorizationServer ??\n      this.platformModel.accessTokenEndpoint\n    );\n  }\n  get kid(): string {\n    return this.platformModel.kid;\n  }\n  get authToken(): AuthConfigType {\n    return this.platformModel.authToken();\n  }\n  get active(): boolean {\n    return this.platformModel.active;\n  }\n  get dynamicallyRegistered(): boolean {\n    return this.platformModel.dynamicallyRegistered;\n  }\n  get productFamilyCode(): string | undefined {\n    return this.platformModel.productFamilyCode;\n  }\n  get registrationEndpoint(): string | undefined {\n    return this.platformModel.registrationEndpoint;\n  }\n  get scopesSupported(): string[] | undefined {\n    return this.platformModel.scopesSupported;\n  }\n\n  /**\n   * @description Sets/Gets the platform name.\n   * @param {string} name - Platform name.\n   */\n  async setName(name: string): Promise<void> {\n    await Database.update(\n      PlatformModel,\n      {\n        name,\n      },\n      {\n        platformUrl: this.platformUrl,\n        clientId: this.clientId,\n      },\n    );\n    await this.platformModel.reload();\n  }\n  /**\n   * @description Sets the platform status.\n   * @param {Boolean} active Whether the Platform is active or not.\n   */\n  async setActive(active: boolean): Promise<void> {\n    await Database.update(\n      PlatformModel,\n      {\n        active,\n      },\n      {\n        platformUrl: this.platformUrl,\n        clientId: this.clientId,\n      },\n    );\n    await this.platformModel.reload();\n  }\n\n  /**\n   * @description Gets the RSA public key assigned to the platform.\n   *\n   */\n  async platformPublicKey(): Promise<KeyObject> {\n    const key = await Database.findOne(PublicKeyModel, {\n      where: { kid: this.kid },\n    });\n    return key.data as unknown as KeyObject;\n  }\n\n  /**\n   * @description Gets the RSA private key assigned to the platform.\n   *\n   */\n  async platformPrivateKey(): Promise<KeyObject> {\n    const key = await Database.findOne(PrivateKeyModel, {\n      where: { kid: this.kid },\n    });\n    return key.data as unknown as KeyObject;\n  }\n\n  /**\n   * @description Sets the platform authorization configurations used to validate it's messages.\n   * @param {string} method Method of authorization \"RSA_KEY\" or \"JWK_KEY\" or \"JWK_SET\".\n   * @param {string} key Either the RSA public key provided by the platform, or the JWK key, or the JWK keyset address.\n   */\n  async setAuthConfig(method?: AuthTokenMethodEnum, key?: string): Promise<void> {\n    await Database.update(\n      PlatformModel,\n      {\n        authTokenMethod: method || this.authToken.method,\n        authTokenKey: key || this.authToken.key,\n      },\n      {\n        platformUrl: this.platformUrl,\n        clientId: this.clientId,\n      },\n    );\n    await this.platformModel.reload();\n  }\n\n  /**\n   * @description Sets the platform authorization endpoint used to perform the OIDC login.\n   * @param {string} authenticationEndpoint Platform authentication endpoint.\n   */\n  async setAuthenticationEndpoint(authenticationEndpoint: string): Promise<void> {\n    await Database.update(\n      PlatformModel,\n      {\n        authenticationEndpoint,\n      },\n      {\n        platformUrl: this.platformUrl,\n        clientId: this.clientId,\n      },\n    );\n    await this.platformModel.reload();\n  }\n\n  /**\n   * @description Sets the platform access token endpoint used to authenticate messages to the platform.\n   * @param {string} accessTokenEndpoint Platform access token endpoint.\n   */\n  async setAccessTokenEndpoint(accessTokenEndpoint: string): Promise<void> {\n    await Database.update(\n      PlatformModel,\n      {\n        accessTokenEndpoint,\n      },\n      {\n        platformUrl: this.platformUrl,\n        clientId: this.clientId,\n      },\n    );\n    await this.platformModel.reload();\n  }\n\n  /**\n   * @description Sets the platform authorization server endpoint used to authenticate messages to the platform.\n   * @param {string} authorizationServer Platform authorization server endpoint.\n   */\n  async setAuthorizationServer(authorizationServer: string | null): Promise<void> {\n    await Database.update(\n      PlatformModel,\n      {\n        authorizationServer,\n      },\n      {\n        platformUrl: this.platformUrl,\n        clientId: this.clientId,\n      },\n    );\n    await this.platformModel.reload();\n  }\n\n  /**\n   * @description Gets the platform access token or attempts to generate a new one.\n   * @param {String} scopes - String of scopes.\n   */\n  async getAccessToken(scopes: string): Promise<AccessTokenType> {\n    if (this.scopesSupported) {\n      scopes.split(' ').forEach((scope) => {\n        if (!this.scopesSupported.some(s => s == scope)) {\n          throw new Error('SCOPE_UNSUPPORTED');\n        }\n      });\n    }\n    const existingToken = await Database.findOne(AccessTokenModel, {\n      where: { platformUrl: this.platformUrl, clientId: this.clientId, scopes },\n    });\n    let token: AccessTokenType;\n    const expired =\n      existingToken &&\n      (Date.now() - existingToken.createdAt.getTime()) / 1000 >\n        existingToken.expiresAt;\n    if (!existingToken || expired) {\n      Debug.log(\n        this,\n        'Valid access_token for ' + this.platformUrl + ' not found',\n      );\n      Debug.log(\n        this,\n        'Attempting to generate new access_token for ' + this.platformUrl,\n      );\n      Debug.log(this, 'With scopes: ' + scopes);\n      token = await Auth.getAccessToken(scopes, this);\n    } else {\n      Debug.log(this, 'Access_token found');\n      token = existingToken.data as unknown as AccessTokenType;\n    }\n    token.token_type =\n      token.token_type.charAt(0).toUpperCase() + token.token_type.slice(1);\n    return token;\n  }\n\n  /**\n   * @description Retrieves the platform information as a JSON object.\n   */\n  async platformParams(): Promise<PlatformProperties & { publicKey: KeyObject }> {\n    return {\n      kid: this.kid,\n      platformUrl: this.platformUrl,\n      clientId: this.clientId,\n      name: this.name,\n      authenticationEndpoint: this.authenticationEndpoint,\n      accessTokenEndpoint: this.accessTokenEndpoint,\n      authToken: this.authToken,\n      publicKey: await this.platformPublicKey(),\n      active: this.active,\n    };\n  }\n\n  /**\n   * @description Deletes a registered platform.\n   */\n  async delete(): Promise<void> {\n    await Database.delete(PublicKeyModel, { kid: this.kid });\n    await Database.delete(PrivateKeyModel, { kid: this.kid });\n    await Database.delete(PlatformModel, {\n      kid: this.kid,\n    });\n  }\n\n  api: PlatformApi = new PlatformApi();\n}\n\nclass PlatformApi {\n  /**\n   * @description Makes an HTTP DELETE request to the platform.\n   * @param url - The URL to make the request to\n   * @param method - The method to use for the request (e.g., 'GET')\n   * @param request - RequestInit properties (e.g., body)\n   * @param fullResponse - (Optional) Return full response object\n   */\n  async request(\n    url: string,\n    method: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE',\n    request?: Omit<RequestInit, 'method'>,\n    fullResponse = false,\n  ): Promise<any | [any, Response]> {\n    return await fetch(url, {\n      ...request,\n      method,\n    })\n      .then(async (res) => {\n        if (!res.ok) {\n          const json = await res.json().catch(() => undefined);\n          throw { status: res.status, message: (json?.error || json?.error_description) ? `${json?.error}: ${json?.error_description}` : res.statusText };\n        }\n        if (res.status == 204) {\n          if (fullResponse) {\n            return [undefined, res];\n          }\n          return;\n        }\n        if (fullResponse) {\n          return [await res.json(), res];\n        }\n        return await res.json();\n      })\n      .catch((err) => {\n        if ('status' in err) {\n          throw new Error(`${err.status}: ${err.message}`);\n        }\n        throw new Error(`500: ${err.toString()}`);\n      });\n  }\n\n  /**\n   * @description Makes an HTTP DELETE request to the platform.\n   * @param url - The URL to make the request to\n   * @param request - RequestInit properties (e.g., body)\n   * @param fullResponse - (Optional) Return full response object\n   */\n  async get(\n    url: string,\n    request?: Omit<RequestInit, 'method'>,\n    fullResponse = false,\n  ) {\n    return await this.request(url, 'GET', request, fullResponse);\n  }\n\n  /**\n   * @description Makes an HTTP DELETE request to the platform.\n   * @param url - The URL to make the request to\n   * @param request - RequestInit properties (e.g., body)\n   * @param fullResponse - (Optional) Return full response object\n   */\n  async post(\n    url: string,\n    request?: Omit<RequestInit, 'method'>,\n    fullResponse = false,\n  ) {\n    return await this.request(url, 'POST', request, fullResponse);\n  }\n\n  /**\n   * @description Makes an HTTP PUT request to the platform.\n   * @param url - The URL to make the request to\n   * @param request - RequestInit properties (e.g., body)\n   * @param fullResponse - (Optional) Return full response object\n   */\n  async put(\n    url: string,\n    request?: Omit<RequestInit, 'method'>,\n    fullResponse = false,\n  ) {\n    return await this.request(url, 'PUT', request, fullResponse);\n  }\n\n  /**\n   * @description Makes an HTTP DELETE request to the platform.\n   * @param url - The URL to make the request to\n   * @param request - RequestInit properties (e.g., body)\n   * @param fullResponse - (Optional) Return full response object\n   */\n  async patch(\n    url: string,\n    request?: Omit<RequestInit, 'method'>,\n    fullResponse = false,\n  ) {\n    return await this.request(url, 'PATCH', request, fullResponse);\n  }\n\n  /**\n   * @description Makes an HTTP DELETE request to the platform.\n   * @param url - The URL to make the request to\n   * @param request - RequestInit properties (e.g., body)\n   * @param fullResponse - (Optional) Return full response object\n   */\n  async delete(\n    url: string,\n    request?: Omit<RequestInit, 'method'>,\n    fullResponse = false,\n  ) {\n    return await this.request(url, 'DELETE', request, fullResponse);\n  }\n}\n"]}