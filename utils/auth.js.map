{"version":3,"file":"auth.js","sourceRoot":"/","sources":["utils/auth.ts"],"names":[],"mappings":"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","sourcesContent":["import {Database} from './database';\nimport {PrivateKeyModel, PublicKeyModel} from '../entities/key.entity';\nimport * as crypto from 'crypto';\nimport * as Jwk from 'rasha';\nimport * as jwt from 'jsonwebtoken';\nimport {JwtPayload} from 'jsonwebtoken';\nimport {Debug} from './debug';\nimport {Platform} from './platform';\nimport {AccessTokenModel} from '../entities/access_token.entity';\nimport {AccessTokenType, IdToken, KeyObject, ValidatedToken,} from './types';\nimport {NonceModel} from '../entities/nonce.entity';\nimport {Provider} from '../provider/provider';\n\n/**\n * @description Authentication class manages RSA keys and validation of tokens.\n */\nexport class Auth {\n  /**\n   * @description Generates a new keypair for a platform.\n   * @param {string} kid\n   * @param {string} platformUrl\n   * @param {string} platformClientId\n   * @returns {Promise<string>} KID for the keypair.\n   */\n  static async generatePlatformKeyPair(\n    kid: string,\n    platformUrl: string,\n    platformClientId: string,\n  ): Promise<string> {\n    const keys = crypto.generateKeyPairSync('rsa', {\n      modulusLength: 4096,\n      publicKeyEncoding: {\n        type: 'spki',\n        format: 'pem',\n      },\n      privateKeyEncoding: {\n        type: 'pkcs1',\n        format: 'pem',\n      },\n    });\n\n    const { publicKey, privateKey } = keys;\n\n    const pubkeyobj: KeyObject = {\n      key: publicKey,\n      kid,\n    };\n    const privkeyobj: KeyObject = {\n      key: privateKey,\n      kid,\n    };\n\n    await Database.save(PublicKeyModel, {\n      kid,\n      platformUrl,\n      clientId: platformClientId,\n      data: pubkeyobj as unknown as string,\n    });\n    await Database.save(PrivateKeyModel, {\n      kid,\n      platformUrl,\n      clientId: platformClientId,\n      data: privkeyobj as unknown as string,\n    });\n    return kid;\n  }\n\n  /**\n   * @description Resolves a promisse if the token is valid following LTI 1.3 standards.\n   * @param {Provider} provider\n   * @param {string} token - JWT token to be verified.\n   * @param {Boolean} devMode - DevMode option.\n   * @param {Object} validationParameters - Stored validation parameters retrieved from database.\n   */\n  static async validateToken(\n    provider: Provider,\n    token: string,\n    devMode: boolean,\n    validationParameters: any,\n  ): Promise<ValidatedToken> {\n    const decoded = jwt.decode(token, { complete: true });\n    if (!decoded) throw new Error('INVALID_JWT_RECEIVED');\n\n    const payload = decoded.payload as JwtPayload;\n\n    const kid = decoded.header.kid;\n    validationParameters.alg = decoded.header.alg;\n\n    Debug.log(this, 'Attempting to validate iss claim');\n    Debug.log(this, 'Request Iss claim: ' + validationParameters.iss);\n    Debug.log(this, 'Response Iss claim: ' + payload.iss);\n    if (!validationParameters.iss) {\n      if (!devMode) {\n        throw new Error('MISSING_VALIDATION_COOKIE');\n      } else {\n        Debug.log(\n          this,\n          'Dev Mode enabled: Missing state validation cookies will be ignored',\n        );\n      }\n    } else if (validationParameters.iss !== payload.iss) {\n      throw new Error('ISS_CLAIM_DOES_NOT_MATCH');\n    }\n\n    Debug.log(this, 'Attempting to retrieve registered platform');\n\n    let platform: Platform | undefined;\n    if (!Array.isArray(payload.aud)) {\n      platform = await provider.getPlatform(payload.iss, payload.aud);\n    } else {\n      for (const aud of payload.aud) {\n        platform = await provider.getPlatform(payload.iss, aud);\n        if (platform) break;\n      }\n    }\n    if (!platform) throw new Error('UNREGISTERED_PLATFORM');\n    if (!platform.active) throw new Error('PLATFORM_NOT_ACTIVATED');\n\n    const authConfig = platform.authToken;\n    /* istanbul ignore next */\n    switch (authConfig.method) {\n      case 'JWK_SET': {\n        Debug.log(this, 'Retrieving key from jwk_set');\n        if (!kid) throw new Error('KID_NOT_FOUND');\n\n        const keysEndpoint = authConfig.key;\n        const res: { keys: any[] } = await platform.api.get(keysEndpoint);\n        const keyset = res.keys;\n        if (!keyset) throw new Error('KEYSET_NOT_FOUND');\n        const jwk = keyset.find((key: any) => {\n          return key.kid === kid;\n        });\n        if (!jwk) throw new Error('KEY_NOT_FOUND');\n        Debug.log(this, 'Converting JWK key to PEM key');\n        const key = await Jwk.export({ jwk });\n\n        return await this.verifyToken(\n          token,\n          key,\n          validationParameters,\n          platform,\n        );\n      }\n      case 'JWK_KEY': {\n        Debug.log(this, 'Retrieving key from jwk_key');\n        if (!authConfig.key) throw new Error('KEY_NOT_FOUND');\n        Debug.log(this, 'Converting JWK key to PEM key');\n        let jwk = authConfig.key;\n        if (typeof jwk === 'string') jwk = JSON.parse(jwk);\n        const key = await Jwk.export({ jwk });\n        return await this.verifyToken(\n          token,\n          key,\n          validationParameters,\n          platform,\n        );\n      }\n      case 'RSA_KEY': {\n        Debug.log(this, 'Retrieving key from rsa_key');\n        const key = authConfig.key;\n        if (!key) throw new Error('KEY_NOT_FOUND');\n        return await this.verifyToken(\n          token,\n          key,\n          validationParameters,\n          platform,\n        );\n      }\n      default: {\n        Debug.log(this, 'No auth configuration found for platform');\n        throw new Error('AUTHCONFIG_NOT_FOUND');\n      }\n    }\n  }\n\n  /**\n   * @description Verifies a token.\n   * @param {string} token - Token to be verified.\n   * @param {string} key - Key to verify the token.\n   * @param {Object} validationParameters - Validation Parameters.\n   * @param {Platform} platform - Issuer platform.\n   */\n  static async verifyToken(\n    token: string,\n    key: string,\n    validationParameters: any,\n    platform: Platform,\n  ): Promise<ValidatedToken> {\n    Debug.log(this, 'Attempting to verify JWT with the given key');\n    const verified = jwt.verify(token, key, {\n      algorithms: [validationParameters.alg],\n      clockTimestamp: Date.now() / 1000,\n    }) as JwtPayload;\n    await this.oidcValidation(verified, platform, validationParameters);\n    await this.claimValidation(verified as IdToken);\n\n    // Adding clientId and platformId information to token\n    verified.clientId = platform.clientId;\n    verified.platformId = platform.kid;\n    return verified as ValidatedToken;\n  }\n\n  /**\n   * @description Validates de token based on the OIDC specifications.\n   * @param {JwtPayload} token - Id token you wish to validate.\n   * @param {Platform} platform - Platform object.\n   * @param {Object} validationParameters - Validation parameters.\n   */\n  static async oidcValidation(\n    token: JwtPayload,\n    platform: Platform,\n    validationParameters: any,\n  ) {\n    Debug.log(this, 'Token signature verified');\n    Debug.log(this, 'Initiating OIDC aditional validation steps');\n\n    const aud = this.validateAud(token, platform);\n    const alg = this.validateAlg(validationParameters.alg);\n    const maxAge = this.validateMaxAge(token, validationParameters.maxAge);\n    const nonce = this.validateNonce(token);\n\n    return Promise.all([aud, alg, maxAge, nonce]);\n  }\n\n  /**\n   * @description Validates Aud.\n   * @param {JwtPayload} token - Id token you wish to validate.\n   * @param {Platform} platform - Platform object.\n   */\n  static async validateAud(token: JwtPayload, platform: Platform) {\n    Debug.log(\n      this,\n      \"Validating if aud (Audience) claim matches the value of the tool's clientId given by the platform\",\n    );\n    Debug.log(this, 'Aud claim: ' + token.aud);\n    Debug.log(this, \"Tool's clientId: \" + platform.clientId);\n    if (Array.isArray(token.aud)) {\n      Debug.log(this, 'More than one aud listed, searching for azp claim');\n      if (token.azp && token.azp !== platform.clientId)\n        throw new Error('AZP_DOES_NOT_MATCH_CLIENTID');\n    } else {\n      return token.aud === platform.clientId;\n    }\n  }\n\n  /**\n   * @description Validates Aug.\n   * @param {String} alg - Algorithm used.\n   */\n  static async validateAlg(alg: string) {\n    Debug.log(this, 'Checking alg claim. Alg: ' + alg);\n    if (alg !== 'RS256') throw new Error('ALG_NOT_RS256');\n    return true;\n  }\n\n  /**\n   * @description Validates token max age.\n   * @param {JwtPayload} token - Id token you wish to validate.\n   * @param {number} maxAge - Max age allowed for the token.\n   */\n  static async validateMaxAge(token: JwtPayload, maxAge: number) {\n    Debug.log(this, 'Max age parameter: ', maxAge);\n    if (!maxAge) return true;\n    Debug.log(\n      this,\n      'Checking iat claim to prevent old tokens from being passed.',\n    );\n    Debug.log(this, 'Iat claim: ' + token.iat);\n    Debug.log(this, 'Exp claim: ' + token.exp);\n    const curTime = Date.now() / 1000;\n    Debug.log(this, 'Current_time: ' + curTime);\n    const timePassed = curTime - token.iat;\n    Debug.log(this, 'Time passed: ' + timePassed);\n    if (timePassed > maxAge) throw new Error('TOKEN_TOO_OLD');\n    return true;\n  }\n\n  /**\n   * @description Validates Nonce.\n   * @param {JwtPayload} token - Id token you wish to validate.\n   */\n  static async validateNonce(token: JwtPayload) {\n    Debug.log(this, 'Validating nonce');\n    Debug.log(this, 'Nonce: ' + token.nonce);\n\n    if (await Database.findOne(NonceModel, { where: { nonce: token.nonce } }))\n      throw new Error('NONCE_ALREADY_RECEIVED');\n    Debug.log(this, 'Storing nonce');\n    await Database.save(NonceModel, { nonce: token.nonce });\n\n    return true;\n  }\n\n  /**\n   * @description Validates de token based on the LTI 1.3 core claims specifications.\n   * @param {JwtPayload & IdToken} token - Id token you wish to validate.\n   */\n  static async claimValidation(token: JwtPayload & IdToken) {\n    Debug.log(this, 'Initiating LTI 1.3 core claims validation');\n\n    Debug.log(this, 'Checking Message type claim');\n    if (\n      token['https://purl.imsglobal.org/spec/lti/claim/message_type'] !==\n        'LtiResourceLinkRequest' &&\n      token['https://purl.imsglobal.org/spec/lti/claim/message_type'] !==\n        'LtiDeepLinkingRequest'\n    )\n      throw new Error('NO_MESSAGE_TYPE_CLAIM');\n\n    if (\n      token['https://purl.imsglobal.org/spec/lti/claim/message_type'] ===\n      'LtiResourceLinkRequest'\n    ) {\n      Debug.log(this, 'Checking Target Link Uri claim');\n      if (!token['https://purl.imsglobal.org/spec/lti/claim/target_link_uri'])\n        throw new Error('NO_TARGET_LINK_URI_CLAIM');\n\n      Debug.log(this, 'Checking Resource Link Id claim');\n      if (\n        !token['https://purl.imsglobal.org/spec/lti/claim/resource_link'] ||\n        !token['https://purl.imsglobal.org/spec/lti/claim/resource_link'].id\n      )\n        throw new Error('NO_RESOURCE_LINK_ID_CLAIM');\n    }\n\n    Debug.log(this, 'Checking LTI Version claim');\n    if (!token['https://purl.imsglobal.org/spec/lti/claim/version'])\n      throw new Error('NO_LTI_VERSION_CLAIM');\n    if (token['https://purl.imsglobal.org/spec/lti/claim/version'] !== '1.3.0')\n      throw new Error('WRONG_LTI_VERSION_CLAIM');\n\n    Debug.log(this, 'Checking Deployment Id claim');\n    if (!token['https://purl.imsglobal.org/spec/lti/claim/deployment_id'])\n      throw new Error('NO_DEPLOYMENT_ID_CLAIM');\n\n    Debug.log(this, 'Checking Sub claim');\n    if (!token.sub) throw new Error('NO_SUB_CLAIM');\n\n    Debug.log(this, 'Checking Roles claim');\n    if (!token['https://purl.imsglobal.org/spec/lti/claim/roles'])\n      throw new Error('NO_ROLES_CLAIM');\n  }\n\n  /**\n   * @description Gets a new access token from the platform.\n   * @param {String} scopes - Request scopes\n   * @param {Platform} platform - Platform object of the platform you want to access.\n   */\n  static async getAccessToken(\n    scopes: string,\n    platform: Platform,\n  ): Promise<AccessTokenType> {\n    const confjwt = {\n      sub: platform.clientId,\n      iss: platform.platformUrl,\n      aud: platform.authorizationServer,\n      jti: encodeURIComponent(\n        [...Array(25)]\n          .map(() => ((Math.random() * 36) | 0).toString(36))\n          .join(``),\n      ),\n    };\n\n    const token = jwt.sign(confjwt, await platform.platformPrivateKey(), {\n      algorithm: 'RS256',\n      expiresIn: 60,\n      keyid: platform.kid,\n    });\n\n    Debug.log(this, 'Awaiting return from the platform');\n    const params = {\n      grant_type: 'client_credentials',\n      client_assertion_type:\n        'urn:ietf:params:oauth:client-assertion-type:jwt-bearer',\n      client_assertion: token,\n      scope: scopes,\n    };\n    const searchParams = new URLSearchParams(params).toString();\n\n    // For LTI platforms that use query params for token routes\n    const url = ['canvas'].includes(platform.productFamilyCode)\n      ? `${platform.accessTokenEndpoint}?${searchParams}`\n      : platform.accessTokenEndpoint;\n\n    const init = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(params),\n    }\n\n    if (platform.platformUrl.toLowerCase().includes('canvas')) {\n      delete init.body;\n    }\n\n    const access: AccessTokenType = await platform.api.post(url, init);\n    Debug.log(this, 'Successfully generated new access_token');\n\n    await Database.save(AccessTokenModel, {\n      platformUrl: platform.platformUrl,\n      clientId: platform.clientId,\n      scopes,\n      data: { ...access } as unknown as string,\n    });\n\n    return access;\n  }\n}\n"]}