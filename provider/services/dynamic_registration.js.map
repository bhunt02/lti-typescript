{"version":3,"file":"dynamic_registration.js","sourceRoot":"/","sources":["provider/services/dynamic_registration.ts"],"names":[],"mappings":"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","sourcesContent":["/* Provider Dynamic Registration Service */\nimport * as crypto from 'crypto';\nimport * as Url from 'fast-url-parser';\nimport { deepMergeObjects } from '../../utils/objects';\nimport { Debug } from '../../utils/debug';\nimport { Provider } from '../provider';\nimport {\n  AccessTokenType,\n  AuthTokenMethodEnum,\n  DynamicRegistrationOptions,\n  DynamicRegistrationSecondaryOptions,\n  OpenIdConfiguration,\n  OpenIdRegistration,\n  ToolOpenIdConfiguration,\n} from '../../utils/types';\nimport { Platform } from '../../utils/platform';\nimport axios, { AxiosError } from 'axios';\n\nexport class DynamicRegistrationService {\n  private readonly name: string;\n  private readonly redirectUris: string[];\n  private readonly customParameters: Record<string, any>;\n  private readonly autoActivate: boolean;\n  private readonly useDeepLinking: boolean;\n  private readonly logo: string;\n  private readonly description: string;\n  private readonly hostname: string;\n\n  private readonly appUrl: string;\n  private readonly loginUrl: string;\n  private readonly keysetUrl: string;\n\n  constructor(\n    private provider: Provider,\n    options: DynamicRegistrationOptions,\n    routes: { appRoute: string; loginRoute: string; keySetRoute: string },\n  ) {\n    this.name = options.name;\n    this.redirectUris = options.redirectUris || [];\n    this.customParameters = options.customParameters || {};\n    this.autoActivate = options.autoActivate;\n    this.useDeepLinking =\n      options.useDeepLinking === undefined ? true : options.useDeepLinking;\n    this.logo = options.logo;\n    this.description = options.description;\n    this.hostname = this.getHostname(options.url);\n    this.appUrl = this.buildUrl(options.url, routes.appRoute);\n    this.loginUrl = this.buildUrl(options.url, routes.loginRoute);\n    this.keysetUrl = this.buildUrl(options.url, routes.keySetRoute);\n  }\n\n  // Helper method to build URLs\n  private buildUrl(url: string, path: string) {\n    if (path === '/') return url;\n    const pathParts = Url.parse(url);\n    const portMatch = pathParts.pathname.match(/:[0-9]*/);\n    if (portMatch) {\n      pathParts.port = portMatch[0].split(':')[1];\n      pathParts.pathname = pathParts.pathname.split(portMatch[0]).join('');\n    }\n    return Url.format({\n      protocol: pathParts.protocol,\n      hostname: pathParts.hostname,\n      pathname: (pathParts.pathname + path).replace('//', '/'),\n      port: pathParts.port,\n      auth: pathParts.auth,\n      hash: pathParts.hash,\n      search: pathParts.search,\n    });\n  }\n\n  // Helper method to get the url hostname\n  private getHostname(url: string) {\n    const pathParts = Url.parse(url);\n    let hostname = pathParts.hostname;\n    if (pathParts.port) hostname += ':' + pathParts.port;\n    return hostname;\n  }\n\n  /**\n   * @description Performs dynamic registration flow.\n   * @param {String} openIdConfiguration - OpenID configuration URL. Retrieved from req.query.openid_configuration.\n   * @param {String} registrationToken - Registration Token. Retrieved from req.query.registration_token.\n   * @param {DynamicRegistrationSecondaryOptions} [options] - Replacements or extensions to default registration options.\n   */\n  async register(\n    openIdConfiguration: string,\n    registrationToken: string,\n    options?: DynamicRegistrationSecondaryOptions,\n  ) {\n    if (!openIdConfiguration) throw new Error('MISSING_OPENID_CONFIGURATION');\n    Debug.log(this, 'Starting dynamic registration process');\n    // Get Platform registration configurations\n    const configuration: OpenIdConfiguration | AxiosError = await axios\n      .request({\n        url: openIdConfiguration,\n        method: 'GET',\n        headers: {\n          Authorization: 'Bearer ' + registrationToken,\n        },\n      })\n      .then((response) => {\n        return response.data as OpenIdConfiguration;\n      })\n      .catch((err: AxiosError) => {\n        return err;\n      });\n    if (configuration instanceof AxiosError) {\n      throw new Error(\n        `${configuration.status}: ${configuration.response.data}`,\n      );\n    }\n    Debug.log(this, 'OpenID Configuration: ', JSON.stringify(configuration));\n    Debug.log(\n      this,\n      'Attempting to register Platform with issuer: ',\n      configuration.issuer,\n    );\n    // Building registration object\n    const messages = [{ type: 'LtiResourceLinkRequest' }];\n    if (this.useDeepLinking) messages.push({ type: 'LtiDeepLinkingRequest' });\n    const registration = deepMergeObjects(\n      {\n        application_type: 'web',\n        response_types: ['id_token'],\n        grant_types: ['client_credentials', 'implicit'],\n        initiate_login_uri: this.loginUrl,\n        redirect_uris: [...this.redirectUris, this.appUrl],\n        client_name: this.name,\n        jwks_uri: this.keysetUrl,\n        logo_uri: this.logo,\n        token_endpoint_auth_method: 'private_key_jwt',\n        scope: [\n          'https://purl.imsglobal.org/spec/lti-ags/scope/lineitem.readonly',\n          'https://purl.imsglobal.org/spec/lti-ags/scope/lineitem',\n          'https://purl.imsglobal.org/spec/lti-ags/scope/score',\n          'https://purl.imsglobal.org/spec/lti-ags/scope/result.readonly',\n          'https://purl.imsglobal.org/spec/lti-nrps/scope/contextmembership.readonly',\n          'https://purl.imsglobal.org/spec/lti-reg/scope/registration',\n          'https://purl.imsglobal.org/spec/lti-reg/scope/registration.readonly',\n        ].join(' '),\n        'https://purl.imsglobal.org/spec/lti-tool-configuration': {\n          domain: this.hostname,\n          description: this.description,\n          target_link_uri: this.appUrl,\n          custom_parameters: this.customParameters,\n          claims: configuration.claims_supported,\n          messages,\n        },\n      } as OpenIdRegistration,\n      options,\n    );\n\n    registration.scope = registration.scope\n      .split(' ')\n      .filter((v0: string) =>\n        configuration.scopes_supported.some((v1) => v1 == v0),\n      )\n      .join(' ');\n\n    Debug.log(\n      this,\n      `Tool registration request: ${JSON.stringify(registration)}`,\n    );\n    Debug.log(this, 'Sending Tool registration request');\n    const registrationResponse: ToolOpenIdConfiguration | AxiosError =\n      await axios\n        .request({\n          method: 'POST',\n          url: configuration.registration_endpoint,\n          data: registration,\n          headers: {\n            'Content-Type': 'application/json',\n            ...(registrationToken\n              ? { Authorization: 'Bearer ' + registrationToken }\n              : undefined),\n          },\n        })\n        .then((response) => {\n          return response.data as ToolOpenIdConfiguration;\n        })\n        .catch((err: AxiosError) => {\n          return err;\n        });\n    if (registrationResponse instanceof AxiosError) {\n      throw new Error(\n        `${registrationResponse.status}: ${registrationResponse.response.data}`,\n      );\n    }\n\n    // Registering Platform\n    const platformName =\n      (configuration[\n        'https://purl.imsglobal.org/spec/lti-platform-configuration'\n      ]\n        ? configuration[\n            'https://purl.imsglobal.org/spec/lti-platform-configuration'\n          ].product_family_code\n        : 'Platform') +\n      '_DynReg_' +\n      crypto.randomBytes(16).toString('hex');\n\n    if (\n      await this.provider.getPlatform(\n        configuration.issuer,\n        registrationResponse.client_id,\n      )\n    )\n      throw new Error('PLATFORM_ALREADY_REGISTERED');\n\n    Debug.log(this, 'Registering Platform');\n\n    await this.provider.registerPlatform({\n      platformUrl: configuration.issuer,\n      name: platformName,\n      clientId: registrationResponse.client_id,\n      authenticationEndpoint: configuration.authorization_endpoint,\n      accessTokenEndpoint: configuration.token_endpoint,\n      authorizationServer: configuration.authorization_server,\n      authToken: {\n        method: AuthTokenMethodEnum.JWK_SET,\n        key: configuration.jwks_uri,\n      },\n      active: this.autoActivate,\n      dynamicallyRegistered: true,\n      registrationEndpoint: configuration.registration_endpoint,\n      scopesSupported: registration.scope.split(' '),\n      productFamilyCode: configuration[\n        'https://purl.imsglobal.org/spec/lti-platform-configuration'\n      ]\n        ? configuration[\n            'https://purl.imsglobal.org/spec/lti-platform-configuration'\n          ].product_family_code\n        : undefined,\n    });\n\n    // Returing message indicating the end of registration flow\n    return '<script>(window.opener || window.parent).postMessage({subject:\"org.imsglobal.lti.close\"}, \"*\");</script>';\n  }\n\n  /**\n   * @description Attempts to retrieve an existing dynamic registration.\n   * @param {Platform} platform The platform for which to retrieve a dynamic registration.\n   * @param {AccessTokenType} accessToken Optionally passed access token to be used in fetching information.\n   */\n  async getRegistration(platform: Platform, accessToken?: AccessTokenType) {\n    if (!platform.dynamicallyRegistered) {\n      throw new Error('PLATFORM_REGISTRATION_STATIC');\n    }\n\n    if (!platform.registrationEndpoint) {\n      throw new Error('MISSING_REGISTRATION_ENDPOINT');\n    }\n\n    accessToken ??= await platform.getAccessToken(\n      'https://purl.imsglobal.org/spec/lti-reg/scope/registration.readonly',\n    );\n\n    return await platform.api.get(platform.registrationEndpoint, {\n      headers: {\n        Authorization: `${accessToken.token_type} ${accessToken.access_token}`,\n      },\n    });\n  }\n\n  /**\n   * @description Performs a dynamic registration update.\n   * @param platform The platform to be updated.\n   * @param {DynamicRegistrationSecondaryOptions} [options] - Replacements or extensions to default registration options.\n   */\n  async updateRegistration(\n    platform: Platform,\n    options?: DynamicRegistrationSecondaryOptions,\n  ) {\n    const accessToken = await platform.getAccessToken(\n      'https://purl.imsglobal.org/spec/lti-reg/scope/registration',\n    );\n\n    const originalRegistration: OpenIdRegistration = await this.getRegistration(\n      platform,\n      accessToken,\n    );\n\n    const registration: OpenIdRegistration = deepMergeObjects(\n      originalRegistration,\n      {\n        application_type: 'web',\n        response_types: ['id_token'],\n        grant_types: ['client_credentials', 'implicit'],\n        initiate_login_uri: this.loginUrl,\n        redirect_uris: [...this.redirectUris, this.appUrl],\n        client_name: this.name,\n        jwks_uri: this.keysetUrl,\n        logo_uri: this.logo,\n        token_endpoint_auth_method: 'private_key_jwt',\n        scope: platform.scopesSupported.join(' '),\n        'https://purl.imsglobal.org/spec/lti-tool-configuration': {\n          domain: this.hostname,\n          description: this.description,\n          target_link_uri: this.appUrl,\n          custom_parameters: this.customParameters,\n        },\n      },\n      options,\n    );\n    Debug.log(\n      this,\n      `Tool registration update: ${JSON.stringify(registration)}`,\n    );\n    Debug.log(this, 'Sending Tool registration update');\n\n    return await platform.api.put(platform.registrationEndpoint, {\n      data: registration,\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `${accessToken.token_type} ${accessToken.access_token}`,\n      },\n    });\n  }\n}\n"]}