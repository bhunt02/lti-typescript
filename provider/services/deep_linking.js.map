{"version":3,"file":"deep_linking.js","sourceRoot":"/","sources":["provider/services/deep_linking.ts"],"names":[],"mappings":"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","sourcesContent":["/* Provider Deep Linking Service */\n\nimport * as jwt from 'jsonwebtoken';\nimport {Debug} from '../../utils/debug';\nimport {BaseContentItem, IdToken} from '../../utils/types';\nimport {Provider} from '../provider';\n\nexport class DeepLinkingService {\n  constructor(private provider: Provider) {}\n\n  /**\n   * @description Creates an auto submitting form containing the DeepLinking Message.\n   * @param {IdToken} idToken - Idtoken for the user.\n   * @param {BaseContentItem | BaseContentItem[]} contentItems - Array of contentItems to be linked.\n   * @param {Object} options - Object containing extra options that mus be sent along the content items.\n   * @param {String} options.message - Message the platform may show to the end user upon return to the platform.\n   * @param {String} options.errMessage - Message the platform may show to the end user upon return to the platform if some error has occurred.\n   * @param {String} options.log - Message the platform may log in it's system upon return to the platform.\n   * @param {String} options.errLog - Message the platform may log in it's system upon return to the platform if some error has occurred.\n   */\n  async createDeepLinkingForm(\n    idToken: IdToken,\n    contentItems: BaseContentItem | BaseContentItem[],\n    options: {\n      message?: string;\n      errMessage?: string;\n      log?: string;\n      errLog?: string;\n    },\n  ): Promise<string> {\n    const message = await this.createDeepLinkingMessage(\n      idToken,\n      contentItems,\n      options,\n    );\n\n    return `\n      <form id=\"ltijs_submit\" style=\"display: none;\" action=\"${idToken.platformContext.deepLinkingSettings.deep_link_return_url}\" method=\"POST\">\n          <input type=\"hidden\" name=\"JWT\" value=\"${message}\" />\n      </form>\n      <script>\n        document.getElementById(\"ltijs_submit\").submit()\n      </script>\n    `;\n  }\n\n  /**\n   * @description Creates a DeepLinking signed message.\n   * @param {Object} idToken - Idtoken for the user.\n   * @param {Array} contentItems - Array of contentItems to be linked.\n   * @param {Object} options - Object containing extra options that mus be sent along the content items.\n   * @param {String} options.message - Message the platform may show to the end user upon return to the platform.\n   * @param {String} options.errMessage - Message the platform may show to the end user upon return to the platform if some error has occurred.\n   * @param {String} options.log - Message the platform may log in it's system upon return to the platform.\n   * @param {String} options.errLog - Message the platform may log in it's system upon return to the platform if some error has occurred.\n   */\n  async createDeepLinkingMessage(\n    idToken: IdToken,\n    contentItems: BaseContentItem | BaseContentItem[],\n    options: {\n      message?: string;\n      errMessage?: string;\n      log?: string;\n      errLog?: string;\n    },\n  ): Promise<string> {\n    Debug.log(this, 'Starting deep linking process');\n    if (!idToken) {\n      Debug.log(this, 'Missing IdToken object.');\n      throw new Error('MISSING_ID_TOKEN');\n    }\n    if (!idToken.platformContext.deepLinkingSettings) {\n      Debug.log(this, 'DeepLinkingSettings object missing.');\n      throw new Error('MISSING_DEEP_LINK_SETTINGS');\n    }\n    if (!contentItems) {\n      Debug.log(this, 'No content item passed.');\n      throw new Error('MISSING_CONTENT_ITEMS');\n    }\n\n    // If it's not an array, turns it into an array\n    if (!Array.isArray(contentItems)) contentItems = [contentItems];\n\n    // Gets platform\n    const platform = await this.provider.getPlatform(\n      idToken.iss,\n      idToken.clientId,\n    );\n    if (!platform) {\n      Debug.log(this, 'Platform not found');\n      throw new Error('PLATFORM_NOT_FOUND');\n    }\n    if (!platform.active) throw new Error('PLATFORM_NOT_ACTIVATED');\n\n    Debug.log(this, 'Building basic JWT body');\n    // Builds basic jwt body\n    const jwtBody = {\n      iss: platform.clientId,\n      aud: idToken.iss,\n      nonce: encodeURIComponent(\n        [...Array(25)]\n          .map((_) => ((Math.random() * 36) | 0).toString(36))\n          .join(''),\n      ),\n      'https://purl.imsglobal.org/spec/lti/claim/deployment_id':\n        idToken.deploymentId,\n      'https://purl.imsglobal.org/spec/lti/claim/message_type':\n        'LtiDeepLinkingResponse',\n      'https://purl.imsglobal.org/spec/lti/claim/version': '1.3.0',\n    };\n\n    // Adding messaging options\n    if (options) {\n      if (options.message)\n        jwtBody['https://purl.imsglobal.org/spec/lti-dl/claim/msg'] =\n          options.message;\n      if (options.errMessage)\n        jwtBody['https://purl.imsglobal.org/spec/lti-dl/claim/errormsg'] =\n          options.errMessage;\n      if (options.log)\n        jwtBody['https://purl.imsglobal.org/spec/lti-dl/claim/log'] =\n          options.log;\n      if (options.errLog)\n        jwtBody['https://purl.imsglobal.org/spec/lti-dl/claim/errorlog'] =\n          options.errLog;\n    }\n\n    // Adding Data claim if it exists in initial request\n    if (idToken.platformContext.deepLinkingSettings.data)\n      jwtBody['https://purl.imsglobal.org/spec/lti-dl/claim/data'] =\n        idToken.platformContext.deepLinkingSettings.data;\n\n    Debug.log(\n      this,\n      \"Sanitizing content item array based on the platform's requirements:\",\n    );\n    const selectedContentItems = [];\n\n    const acceptedTypes =\n      idToken.platformContext.deepLinkingSettings.accept_types;\n    const acceptMultiple = !(\n      idToken.platformContext.deepLinkingSettings.accept_multiple === 'false' ||\n      idToken.platformContext.deepLinkingSettings.accept_multiple === false\n    );\n\n    Debug.log(this, 'Accepted Types: ' + acceptedTypes);\n    Debug.log(this, 'Accepts Mutiple: ' + acceptMultiple);\n\n    Debug.log(this, 'Received content items: ');\n    Debug.log(this, contentItems);\n\n    for (const contentItem of contentItems) {\n      if (!acceptedTypes.includes(contentItem.type)) continue;\n      selectedContentItems.push(contentItem);\n      if (!acceptMultiple) break;\n    }\n    Debug.log(this, 'Content items to be sent: ');\n    Debug.log(this, selectedContentItems);\n    jwtBody['https://purl.imsglobal.org/spec/lti-dl/claim/content_items'] =\n      selectedContentItems;\n\n    return jwt.sign(jwtBody, await platform.platformPrivateKey(), {\n      algorithm: 'RS256',\n      expiresIn: 60,\n      keyid: platform.kid,\n    });\n  }\n}\n"]}