import { Platform } from '../utils/platform';
import { GradeService } from './services/grade';
import { DeepLinkingService } from './services/deep_linking';
import { NamesAndRolesService } from './services/names_and_roles';
import { DynamicRegistrationService } from './services/dynamic_registration';
import { Server as HttpServer } from 'http';
import { Server as HttpsServer } from 'https';
import { Express, NextFunction, Request as ExpressRequest, Response as ExpressResponse } from 'express';
import { AccessTokenType, IdToken, PlatformProperties, ProviderOptions, RouteType } from '../utils/types';
import { DataSourceOptions } from 'typeorm';
export type Callback = (req: ExpressRequest, res: ExpressResponse, next?: NextFunction) => Promise<void | ExpressResponse> | (void | ExpressResponse);
export type CallbackWithToken = (token: IdToken, req: ExpressRequest, res: ExpressResponse, next?: NextFunction) => Promise<void | ExpressResponse> | (void | ExpressResponse);
export declare function register(encryptionKey: string, databaseOptions: DataSourceOptions, options: ProviderOptions): Promise<Provider>;
export declare class Provider {
    private _prefix;
    get prefix(): string;
    private set prefix(value);
    private _loginRoute;
    get loginRoute(): string;
    private set loginRoute(value);
    private _appRoute;
    get appRoute(): string;
    private set appRoute(value);
    private _keySetRoute;
    get keySetRoute(): string;
    private set keySetRoute(value);
    private _dynRegRoute;
    get dynRegRoute(): string;
    private set dynRegRoute(value);
    private whitelistedRoutes;
    get whitelist(): RouteType[];
    set whitelist(routes: (string | RouteType)[]);
    private encryptionKey;
    private devMode;
    private tokenMaxAge;
    private cookieOptions;
    private isSetup;
    private server;
    private _app;
    get app(): Express;
    private set app(value);
    private _DynamicRegistration;
    get DynamicRegistration(): DynamicRegistrationService;
    private set DynamicRegistration(value);
    private _GradeService;
    get GradeService(): GradeService;
    private set GradeService(value);
    private _NamesAndRolesService;
    get NamesAndRolesService(): NamesAndRolesService;
    private set NamesAndRolesService(value);
    private _DeepLinkingService;
    get DeepLinkingService(): DeepLinkingService;
    private set DeepLinkingService(value);
    getServer(): HttpServer | HttpsServer;
    private connectCallback;
    private deepLinkingCallback;
    private dynamicRegistrationCallback;
    private sessionTimeoutCallback;
    private invalidTokenCallback;
    private unregisteredPlatformCallback;
    private inactivePlatformCallback;
    private keyset;
    private clearStateCookie;
    setup(encryptionKey: string, databaseOptions: DataSourceOptions, options: ProviderOptions): Promise<this>;
    deploy(options?: {
        port?: number;
        silent?: boolean;
        serverless?: boolean;
    }): Promise<true>;
    close(silent?: boolean): Promise<void>;
    onConnect(connectCallback: CallbackWithToken): void;
    onDeepLinking(deepLinkingCallback: CallbackWithToken): void;
    onDynamicRegistration(dynamicRegistrationCallback: Callback): void;
    onSessionTimeout(sessionTimeoutCallback: Callback): void;
    onInvalidToken(invalidTokenCallback: Callback): void;
    onUnregisteredPlatform(unregisteredPlatformCallback: Callback): void;
    onInactivePlatform(inactivePlatformCallback: Callback): void;
    registerPlatform(platform: Omit<PlatformProperties, 'kid'>): Promise<Platform>;
    getPlatform(url: string, clientId: string): Promise<Platform | undefined>;
    getPlatforms(url: string): Promise<Platform[]>;
    getPlatformById(platformId: string): Promise<Platform | undefined>;
    updatePlatformById(platformId: string, platformInfo: Partial<PlatformProperties>): Promise<Platform | undefined>;
    deletePlatform(url: string, clientId: string): Promise<void>;
    deletePlatformById(platformId: string): Promise<void>;
    getAllPlatforms(): Promise<Platform[]>;
    redirect(res: ExpressResponse, path: string, options?: {
        newResource?: boolean;
        isNewResource?: boolean;
        query?: Record<string, any>;
    }): Promise<void>;
    checkAccessToken(idToken: IdToken, scope: string, accessToken?: AccessTokenType): Promise<AccessTokenType>;
    private ltiAdvantageLogin;
}
